diff --git a/node_modules/react-native-aes-crypto/android/build.gradle b/node_modules/react-native-aes-crypto/android/build.gradle
index 9bfe598..c089fef 100644
--- a/node_modules/react-native-aes-crypto/android/build.gradle
+++ b/node_modules/react-native-aes-crypto/android/build.gradle
@@ -25,10 +25,11 @@ apply plugin: 'maven-publish'
 // Matches values in recent template from React Native 0.59 / 0.60
 // https://github.com/facebook/react-native/blob/0.59-stable/template/android/build.gradle#L5-L9
 // https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle#L5-L9
-def DEFAULT_COMPILE_SDK_VERSION = 28
-def DEFAULT_BUILD_TOOLS_VERSION = "28.0.3"
-def DEFAULT_MIN_SDK_VERSION = 16
-def DEFAULT_TARGET_SDK_VERSION = 28
+def DEFAULT_COMPILE_SDK_VERSION = 30
+def DEFAULT_BUILD_TOOLS_VERSION = "30.0.2"
+def DEFAULT_MIN_SDK_VERSION = 21
+def DEFAULT_TARGET_SDK_VERSION = 30
+
 
 android {
     compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
diff --git a/node_modules/react-native-aes-crypto/index.d.ts b/node_modules/react-native-aes-crypto/index.d.ts
index df7ec35..e987241 100644
--- a/node_modules/react-native-aes-crypto/index.d.ts
+++ b/node_modules/react-native-aes-crypto/index.d.ts
@@ -1,15 +1,13 @@
 declare module 'react-native-aes-crypto' {
-    namespace Aes {
-        type Algorithms = 'aes-128-cbc' | 'aes-192-cbc' | 'aes-256-cbc'
+    type Algorithms = 'aes-128-cbc' | 'aes-192-cbc' | 'aes-256-cbc'
 
-        function pbkdf2(password: string, salt: string, cost: number, length: number): Promise<string>
-        function encrypt(text: string, key: string, iv: string, algorithm: Algorithms): Promise<string>
-        function decrypt(ciphertext: string, key: string, iv: string, algorithm: Algorithms): Promise<string>
-        function hmac256(ciphertext: string, key: string): Promise<string>
-        function hmac512(ciphertext: string, key: string): Promise<string>
-        function randomKey(length: number): Promise<string>
-        function sha1(text: string): Promise<string>
-        function sha256(text: string): Promise<string>
-        function sha512(text: string): Promise<string>
-    }
+    function pbkdf2(password: string, salt: string, cost: number, length: number): Promise<string>
+    function encrypt(text: string, key: string, iv: string, algorithm: Algorithms): Promise<string>
+    function decrypt(ciphertext: string, key: string, iv: string, algorithm: Algorithms): Promise<string>
+    function hmac256(ciphertext: string, key: string): Promise<string>
+    function hmac512(ciphertext: string, key: string): Promise<string>
+    function randomKey(length: number): Promise<string>
+    function sha1(text: string): Promise<string>
+    function sha256(text: string): Promise<string>
+    function sha512(text: string): Promise<string>
 }
